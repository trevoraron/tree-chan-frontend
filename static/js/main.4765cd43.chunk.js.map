{"version":3,"sources":["Constants.tsx","NewMessage.tsx","Post.tsx","PostManager.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ContractAddress","ContractMethods","NewMessage","props","useState","sendingTx","setSendingTx","comment","setComment","newThread","a","createNewFunction","tx","console","log","hash","wait","receipt","blockNumber","iface","ethers","utils","Interface","parsed","parseLog","events","tokenID","args","_tokenId","updateID","commentBox","Form","onSubmit","event","preventDefault","Control","as","rows","value","onChange","e","target","Container","Spinner","animation","role","Button","variant","onClick","name","Post","message","setMessage","owner","setOwner","useEffect","contract","Contract","signer","ownerOf","id","readOwner","getMessage","readMessage","fetchData","messageDisplayed","Card","Subtitle","Text","Body","Title","toString","PostManager","updateMainID","parents","updateParents","replies","updateReplies","getParents","curParents","getBranches","curReplies","Group","Row","Col","sm","type","toNumber","data","parseInt","BigNumber","from","map","p","App","waiting","setWaiting","setSigner","address","setAddress","enableMetamask","window","ethereum","enable","provider","providers","Web3Provider","currSigner","getSigner","getAddress","element","post","className","Jumbotron","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4765cd43.chunk.js","sourcesContent":["const ContractAddress = \"0xFc2540389af95921a8c2D8AeA3A884bf9e38cee8\";\nconst ContractMethods = [\n  \"function getMessage(uint256 _token) external view returns (string message)\",\n  \"function ownerOf(uint256 _tokenId) external view returns (address)\",\n  \"function getParents(uint256 _token) external view returns (uint256[] memory)\",\n  \"function getBranches(uint256 _token) external view returns (uint256[] memory)\",\n  \"function newThread(string memory _message) public returns (uint256)\",\n  \"function comment(uint256 _post, string memory _message)\",\n  \"function totalSupply() external view returns (uint256)\",\n  \"event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)\",\n\n];\n\nexport { ContractAddress, ContractMethods }","\nimport React, { useState } from 'react';\nimport { BigNumber, ethers, Signer } from 'ethers';\nimport { Form} from 'react-bootstrap'\nimport { ContractMethods } from './Constants';\nimport { Spinner, Button, Container } from 'react-bootstrap'\n\ntype NewMessageProps = {\n    signer: Signer\n    updateID: React.Dispatch<React.SetStateAction<BigNumber>>\n    createNewFunction: (message: string) => any\n    name: string\n}\nfunction NewMessage(props: NewMessageProps) {\n    const [sendingTx, setSendingTx] = useState(false)\n    const [comment, setComment] = useState(\"\")\n\n    function handleSubmit(event: any) {\n        event.preventDefault();\n    }\n\n    async function newThread() {\n        const tx = await props.createNewFunction(comment)\n        console.log(`Transaction hash: ${tx.hash}`);\n        setSendingTx(true)\n    \n        const receipt = await tx.wait();\n        console.log(`Transaction confirmed in block ${receipt.blockNumber}`);\n        let iface = new ethers.utils.Interface(ContractMethods);\n        let parsed = iface.parseLog(receipt.events[0]);\n        let tokenID = parsed.args._tokenId\n        console.log(`New Token ID: ${tokenID}`)\n        setComment(\"\")\n        setSendingTx(false)\n        props.updateID(tokenID)\n    }\n\n    let commentBox = (\n        <Form onSubmit={handleSubmit}>\n            <Form.Control as=\"textarea\" rows={2} value={comment} onChange={(e) => setComment(e.target.value)}/>\n        </Form>\n    )\n    if(sendingTx) {\n        commentBox = <Container><Spinner animation=\"border\" role=\"status\"></Spinner>&nbsp;</Container>\n    }\n\n    return (\n        <>\n            {commentBox}\n            &nbsp;\n            <Button variant=\"primary\" onClick={async () => {await newThread()}}>{props.name}</Button>\n        </>\n    )\n\n}\n\nexport { NewMessage };","import React, { useEffect, useState } from 'react';\nimport { Button, Spinner } from 'react-bootstrap';\nimport { BigNumber, ethers, Signer} from 'ethers';\nimport { Card } from 'react-bootstrap'\nimport { ContractAddress, ContractMethods } from './Constants';\nimport { NewMessage } from './NewMessage';\n\ntype PostProps = {\n    id: BigNumber \n    signer: Signer\n    updateID: React.Dispatch<React.SetStateAction<BigNumber>>\n}\n  \nfunction Post(props: PostProps) {\n    const [message, setMessage] = useState(\"\")\n    const [owner, setOwner] = useState(\"\")\n\n    useEffect(() =>  {\n        let contract = new ethers.Contract(\n            ContractAddress,\n            ContractMethods,\n            props.signer\n        )\n        const fetchData = async () => {\n            let readOwner = await contract.ownerOf(props.id)\n            let readMessage = await contract.getMessage(props.id)\n            setMessage(readMessage)\n            setOwner(readOwner)\n        }\n        fetchData()\n    }, [props.id, props.signer])\n\n    function makePrimary() {\n        props.updateID(props.id)\n    }\n\n    function newComment(message: string) {\n        let contract = new ethers.Contract(\n            ContractAddress,\n            ContractMethods,\n            props.signer\n        )\n        return contract.comment(props.id, message)\n    }\n\n    let messageDisplayed = <Spinner animation=\"border\" role=\"status\"></Spinner>\n    if(message !== \"\") {\n        messageDisplayed = <>\n            <Card.Subtitle>Owner: {owner}</Card.Subtitle>\n            <Card.Text>{message}</Card.Text>\n        </>\n    }\n\n    return (\n        <Card>\n        <Card.Body>\n            <Card.Title>Post #{props.id.toString()}</Card.Title>\n            {messageDisplayed}\n            <NewMessage signer={props.signer} updateID={props.updateID} createNewFunction={newComment} name=\"New Comment\"/>\n            <Button variant=\"secondary\" onClick={() => makePrimary()}>Make Primary</Button>\n        </Card.Body>\n        </Card>\n    )\n}\n\nexport {Post};","import React, { useEffect, useState } from 'react';\nimport { BigNumber, ethers, Signer } from 'ethers';\nimport { Col, Row, Form} from 'react-bootstrap'\nimport { ContractAddress, ContractMethods } from './Constants';\nimport { NewMessage } from './NewMessage';\nimport { Post } from './Post';\n\n\ntype PostManagerProps = {\n    id: BigNumber \n    signer: Signer\n}\nfunction PostManager(props: PostManagerProps) {\n    const [id, updateMainID] = useState(props.id)\n    const [parents, updateParents] = useState<BigNumber[]>([])\n    const [replies, updateReplies] = useState<BigNumber[]>([])\n\n    useEffect(() =>  {\n        let contract = new ethers.Contract(\n            ContractAddress,\n            ContractMethods,\n            props.signer\n        )\n        const fetchData = async () => {\n        let curParents = await contract.getParents(id)\n        let curReplies = await contract.getBranches(id)\n        updateParents(curParents)\n        updateReplies(curReplies)\n    }\n        fetchData()\n    }, [id, props.signer])\n\n    function handleSubmit(event: any) {\n        event.preventDefault();\n    }\n\n    function onChange(event: any) {\n        let data = parseInt(event.target.value)\n        if (!data) {\n            return\n        }\n        if (data <= 0) {\n            return\n        }\n        updateMainID(BigNumber.from(data))\n    }\n\n    function newThread(message: string) {\n        let contract = new ethers.Contract(\n            ContractAddress,\n            ContractMethods,\n            props.signer\n        )\n        return contract.newThread(message)\n    }\n\n    return <>\n        <NewMessage signer={props.signer} updateID={updateMainID} createNewFunction={newThread} name=\"New Thread\"/>\n        <Form onSubmit={handleSubmit}>\n            <Form.Group as={Row}>\n            <Col sm={2}>\n                <h3> Post Num: </h3>\n            </Col>\n            <Col sm={2}>\n                <Form.Control type=\"number\" value={id.toNumber()} onChange={onChange}/>\n            </Col>\n            </Form.Group>\n        </Form>\n        <h3>Parents</h3>\n        {parents.map(p => <Post id={p} signer={props.signer} updateID={updateMainID}></Post>)}\n        <h3>Post</h3>\n        <Post id={id} signer={props.signer} updateID={updateMainID}></Post>\n        <h3>Replies</h3>\n        {replies.map(p => <Post id={p} signer={props.signer} updateID={updateMainID}></Post>)}\n    </>\n}\n\nexport { PostManager };","import React, { useState } from 'react';\n// import './App.css';\nimport { Jumbotron, Button, Spinner } from 'react-bootstrap';\nimport { BigNumber, ethers, Signer } from 'ethers';\nimport {Container} from 'react-bootstrap'\nimport { PostManager } from './PostManager'\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n\nfunction App() {\n  const [waiting, setWaiting] = useState(false)\n  const [signer, setSigner] = useState<Signer | null>(null)\n  const [address, setAddress] = useState(\"\")\n\n  async function enableMetamask() {\n    setWaiting(true)\n    await window.ethereum.enable()\n    let provider = new ethers.providers.Web3Provider(window.ethereum)\n    let currSigner = provider.getSigner()\n    let address = await currSigner.getAddress()\n    console.log(\"Got Address!\")\n    console.log(address)\n    setAddress(address)\n    setSigner(currSigner)\n    setWaiting(false)\n  }\n\n  let element = <></>\n  let post = <></>\n  if (waiting) {\n    element = <Spinner animation=\"border\" role=\"status\"></Spinner>\n  } else if (signer == null) {\n    element = <Button onClick={async () => {await enableMetamask()}}>\n      Connect Wallet\n    </Button>\n  } else {\n    element = <p>User Address: {address}</p>\n    post = <PostManager id={BigNumber.from(1)} signer={signer}></PostManager>\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n      <Jumbotron>\n        <h1>Tree Chan Frontend</h1>\n        {element}\n      </Jumbotron>\n      {post}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}